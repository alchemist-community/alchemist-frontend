{"version":3,"sources":["../node_modules/hdkey/lib/hdkey.js","../node_modules/hdkey/node_modules/secp256k1/elliptic.js","../node_modules/hdkey/node_modules/secp256k1/lib/index.js","../node_modules/hdkey/node_modules/secp256k1/lib/elliptic.js","../node_modules/bs58/index.js","../node_modules/bs58check/index.js","../node_modules/bs58check/base.js","../node_modules/base-x/src/index.js","../node_modules/bnc-onboard/dist/esm/hd-wallet-642b97e3.js"],"names":["assert","require","Buffer","crypto","bs58check","secp256k1","MASTER_SECRET","from","BITCOIN_VERSIONS","private","public","HDKey","versions","this","depth","index","_privateKey","_publicKey","chainCode","_fingerprint","parentFingerprint","serialize","hdkey","version","key","buffer","allocUnsafe","writeUInt32BE","writeUInt8","fingerprint","copy","hash160","buf","sha","createHash","update","digest","Object","defineProperty","prototype","get","_identifier","identifier","set","value","equal","length","privateKeyVerify","publicKeyCreate","publicKey","slice","readUInt32BE","publicKeyVerify","publicKeyConvert","encode","concat","alloc","privateKey","derive","path","entries","split","forEach","c","i","hardened","childIndex","parseInt","deriveChild","test","data","isHardened","indexBuffer","pk","zb","I","createHmac","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","sign","hash","ecdsaSign","signature","verify","ecdsaVerify","Uint8Array","wipePrivateData","randomBytes","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","decode","readUInt8","fromJSON","obj","HARDENED_OFFSET","module","exports","errors","cond","msg","Error","isUint8Array","name","undefined","Array","isArray","numbers","join","includes","isCompressed","toTypeString","getAssertedOutput","output","len","toString","call","contextRandomize","seed","seckey","privateKeyNegate","tweak","privateKeyTweakMul","pubkey","compressed","publicKeyNegate","publicKeyCombine","pubkeys","publicKeyTweakMul","signatureNormalize","sig","signatureExport","outputlen","signatureImport","msg32","options","noncefn","recid","ecdsaRecover","ecdh","hashfn","xbuf","ybuf","ec","EC","ecparams","curve","BN","n","constructor","loadPublicKey","first","x","cmp","p","y","toRed","red","redSqr","redIMul","redIAdd","b","redSqrt","isOdd","redNeg","keyPair","pub","loadCompressedPublicKey","subarray","x3","redISub","isZero","loadUncompressedPublicKey","savePublicKey","point","bn","negate","sub","umod","toArrayLike","iadd","isub","tweaked","imul","keyFromPrivate","getPublic","pair","pairs","add","isInfinity","g","mul","r","s","nh","sigR","sigS","lenR","posR","lenS","posS","message","_noncefn","counter","nonce","d","canonical","k","pers","recoveryParam","sigObj","sigr","sigs","recoverPubKey","scalar","sha256","getX","toArray","getY","basex","bs58checkBase","tmp","base58","checksumFn","decodeRaw","payload","checksum","newChecksum","string","decodeUnsafe","_Buffer","ALPHABET","TypeError","BASE_MAP","j","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","source","psz","zeroes","size","b256","carry","it3","it4","vch","fill","isBuffer","pbegin","pend","b58","it1","it2","str","repeat","publicToAddress","ethUtil","toChecksumAddress","generateAddresses","account","offset","hdk","addresses","dkey","address","push","dPath","isValidPath","parts","accountFieldDigit","Number","isNaN","changeFieldDigit","addressFieldDigit"],"mappings":"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","file":"static/js/8.3f900ac0.chunk.js","sourcesContent":["var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n","module.exports = require('./lib')(require('./lib/elliptic'))\n","const errors = {\n  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',\n  TWEAK_ADD:\n    'The tweak was out of range or the resulted private key is invalid',\n  TWEAK_MUL: 'The tweak was out of range or equal to zero',\n  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',\n  SECKEY_INVALID: 'Private Key is invalid',\n  PUBKEY_PARSE: 'Public Key could not be parsed',\n  PUBKEY_SERIALIZE: 'Public Key serialization error',\n  PUBKEY_COMBINE: 'The sum of the public keys is not valid',\n  SIG_PARSE: 'Signature could not be parsed',\n  SIGN: 'The nonce generation function failed, or the private key was invalid',\n  RECOVER: 'Public key could not be recover',\n  ECDH: 'Scalar was invalid (zero or overflow)'\n}\n\nfunction assert (cond, msg) {\n  if (!cond) throw new Error(msg)\n}\n\nfunction isUint8Array (name, value, length) {\n  assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)\n\n  if (length !== undefined) {\n    if (Array.isArray(length)) {\n      const numbers = length.join(', ')\n      const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`\n      assert(length.includes(value.length), msg)\n    } else {\n      const msg = `Expected ${name} to be an Uint8Array with length ${length}`\n      assert(value.length === length, msg)\n    }\n  }\n}\n\nfunction isCompressed (value) {\n  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')\n}\n\nfunction getAssertedOutput (output = (len) => new Uint8Array(len), length) {\n  if (typeof output === 'function') output = output(length)\n  isUint8Array('output', output, length)\n  return output\n}\n\nfunction toTypeString (value) {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nmodule.exports = (secp256k1) => {\n  return {\n    contextRandomize (seed) {\n      assert(\n        seed === null || seed instanceof Uint8Array,\n        'Expected seed to be an Uint8Array or null'\n      )\n      if (seed !== null) isUint8Array('seed', seed, 32)\n\n      switch (secp256k1.contextRandomize(seed)) {\n        case 1:\n          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)\n      }\n    },\n\n    privateKeyVerify (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      return secp256k1.privateKeyVerify(seckey) === 0\n    },\n\n    privateKeyNegate (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      switch (secp256k1.privateKeyNegate(seckey)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    privateKeyTweakAdd (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    privateKeyTweakMul (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    publicKeyVerify (pubkey) {\n      isUint8Array('public key', pubkey, [33, 65])\n\n      return secp256k1.publicKeyVerify(pubkey) === 0\n    },\n\n    publicKeyCreate (seckey, compressed = true, output) {\n      isUint8Array('private key', seckey, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCreate(output, seckey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SECKEY_INVALID)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyConvert (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyConvert(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyNegate (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyNegate(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyCombine (pubkeys, compressed = true, output) {\n      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')\n      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')\n      for (const pubkey of pubkeys) {\n        isUint8Array('public key', pubkey, [33, 65])\n      }\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCombine(output, pubkeys)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_COMBINE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    publicKeyTweakMul (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    signatureNormalize (sig) {\n      isUint8Array('signature', sig, 64)\n\n      switch (secp256k1.signatureNormalize(sig)) {\n        case 0:\n          return sig\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n      }\n    },\n\n    signatureExport (sig, output) {\n      isUint8Array('signature', sig, 64)\n      output = getAssertedOutput(output, 72)\n\n      const obj = { output, outputlen: 72 }\n      switch (secp256k1.signatureExport(obj, sig)) {\n        case 0:\n          return output.slice(0, obj.outputlen)\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    signatureImport (sig, output) {\n      isUint8Array('signature', sig)\n      output = getAssertedOutput(output, 64)\n\n      switch (secp256k1.signatureImport(output, sig)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaSign (msg32, seckey, options = {}, output) {\n      isUint8Array('message', msg32, 32)\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')\n      output = getAssertedOutput(output, 64)\n\n      const obj = { signature: output, recid: null }\n      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {\n        case 0:\n          return obj\n        case 1:\n          throw new Error(errors.SIGN)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaVerify (sig, msg32, pubkey) {\n      isUint8Array('signature', sig, 64)\n      isUint8Array('message', msg32, 32)\n      isUint8Array('public key', pubkey, [33, 65])\n\n      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {\n        case 0:\n          return true\n        case 3:\n          return false\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_PARSE)\n      }\n    },\n\n    ecdsaRecover (sig, recid, msg32, compressed = true, output) {\n      isUint8Array('signature', sig, 64)\n      assert(\n        toTypeString(recid) === 'Number' &&\n          recid >= 0 &&\n          recid <= 3,\n        'Expected recovery id to be a Number within interval [0, 3]'\n      )\n      isUint8Array('message', msg32, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.RECOVER)\n        case 3:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdh (pubkey, seckey, options = {}, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.hashfn !== undefined) {\n        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')\n        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)\n        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)\n        isUint8Array('output', output)\n      } else {\n        output = getAssertedOutput(output, 32)\n      }\n\n      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.ECDH)\n      }\n    }\n  }\n}\n","const EC = require('elliptic').ec\n\nconst ec = new EC('secp256k1')\nconst ecparams = ec.curve\n\n// Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\nconst BN = ecparams.n.constructor\n\nfunction loadCompressedPublicKey (first, xbuf) {\n  let x = new BN(xbuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xbuf, ybuf) {\n  let x = new BN(xbuf)\n  let y = new BN(ybuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  const x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (pubkey) {\n  // length should be validated in interface\n  const first = pubkey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (pubkey.length !== 33) return null\n      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (pubkey.length !== 65) return null\n      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))\n    default:\n      return null\n  }\n}\n\nfunction savePublicKey (output, point) {\n  const pubkey = point.encode(null, output.length === 33)\n  // Loop should be faster because we do not need create extra Uint8Array\n  // output.set(new Uint8Array(pubkey))\n  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]\n}\n\nmodule.exports = {\n  contextRandomize () {\n    return 0\n  },\n\n  privateKeyVerify (seckey) {\n    const bn = new BN(seckey)\n    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1\n  },\n\n  privateKeyNegate (seckey) {\n    const bn = new BN(seckey)\n    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(negate)\n    return 0\n  },\n\n  privateKeyTweakAdd (seckey, tweak) {\n    const bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0) return 1\n\n    bn.iadd(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n    if (bn.isZero()) return 1\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  privateKeyTweakMul (seckey, tweak) {\n    let bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    bn.imul(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  publicKeyVerify (pubkey) {\n    const pair = loadPublicKey(pubkey)\n    return pair === null ? 1 : 0\n  },\n\n  publicKeyCreate (output, seckey) {\n    const bn = new BN(seckey)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    const point = ec.keyFromPrivate(seckey).getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyConvert (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyNegate (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    point.y = point.y.redNeg()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyCombine (output, pubkeys) {\n    const pairs = new Array(pubkeys.length)\n    for (let i = 0; i < pubkeys.length; ++i) {\n      pairs[i] = loadPublicKey(pubkeys[i])\n      if (pairs[i] === null) return 1\n    }\n\n    let point = pairs[0].getPublic()\n    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakAdd (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0) return 2\n\n    const point = pair.getPublic().add(ecparams.g.mul(tweak))\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakMul (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2\n\n    const point = pair.getPublic().mul(tweak)\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  signatureNormalize (sig) {\n    const r = new BN(sig.subarray(0, 32))\n    const s = new BN(sig.subarray(32, 64))\n    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1\n\n    if (s.cmp(ec.nh) === 1) {\n      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)\n    }\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureExport (obj, sig) {\n    const sigR = sig.subarray(0, 32)\n    const sigS = sig.subarray(32, 64)\n    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1\n    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1\n\n    const { output } = obj\n\n    // Prepare R\n    let r = output.subarray(4, 4 + 33)\n    r[0] = 0x00\n    r.set(sigR, 1)\n\n    let lenR = 33\n    let posR = 0\n    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n    r = r.subarray(posR)\n    if (r[0] & 0x80) return 1\n    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1\n\n    // Prepare S\n    let s = output.subarray(6 + 33, 6 + 33 + 33)\n    s[0] = 0x00\n    s.set(sigS, 1)\n\n    let lenS = 33\n    let posS = 0\n    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n    s = s.subarray(posS)\n    if (s[0] & 0x80) return 1\n    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1\n\n    // Set output length for return\n    obj.outputlen = 6 + lenR + lenS\n\n    // Output in specified format\n    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n    output[0] = 0x30\n    output[1] = obj.outputlen - 2\n    output[2] = 0x02\n    output[3] = r.length\n    output.set(r, 4)\n    output[4 + lenR] = 0x02\n    output[5 + lenR] = s.length\n    output.set(s, 6 + lenR)\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureImport (output, sig) {\n    if (sig.length < 8) return 1\n    if (sig.length > 72) return 1\n    if (sig[0] !== 0x30) return 1\n    if (sig[1] !== sig.length - 2) return 1\n    if (sig[2] !== 0x02) return 1\n\n    const lenR = sig[3]\n    if (lenR === 0) return 1\n    if (5 + lenR >= sig.length) return 1\n    if (sig[4 + lenR] !== 0x02) return 1\n\n    const lenS = sig[5 + lenR]\n    if (lenS === 0) return 1\n    if ((6 + lenR + lenS) !== sig.length) return 1\n\n    if (sig[4] & 0x80) return 1\n    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1\n\n    if (sig[lenR + 6] & 0x80) return 1\n    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1\n\n    let sigR = sig.subarray(4, 4 + lenR)\n    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)\n    if (sigR.length > 32) return 1\n\n    let sigS = sig.subarray(6 + lenR)\n    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)\n    if (sigS.length > 32) throw new Error('S length is too long')\n\n    let r = new BN(sigR)\n    if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n    let s = new BN(sig.subarray(6 + lenR))\n    if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)\n    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)\n\n    return 0\n  },\n\n  ecdsaSign (obj, message, seckey, data, noncefn) {\n    if (noncefn) {\n      const _noncefn = noncefn\n      noncefn = (counter) => {\n        const nonce = _noncefn(message, seckey, null, data, counter)\n\n        const isValid = nonce instanceof Uint8Array && nonce.length === 32\n        if (!isValid) throw new Error('This is the way')\n\n        return new BN(nonce)\n      }\n    }\n\n    const d = new BN(seckey)\n    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1\n\n    let sig\n    try {\n      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })\n    } catch (err) {\n      return 1\n    }\n\n    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)\n    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)\n    obj.recid = sig.recoveryParam\n\n    return 0\n  },\n\n  ecdsaVerify (sig, msg32, pubkey) {\n    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3\n\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 2\n\n    const point = pair.getPublic()\n    const isValid = ec.verify(msg32, sigObj, point)\n    return isValid ? 0 : 3\n  },\n\n  ecdsaRecover (output, sig, recid, msg32) {\n    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n\n    if (sigr.isZero() || sigs.isZero()) return 2\n\n    // Can throw `throw new Error('Unable to find sencond key candinate');`\n    let point\n    try {\n      point = ec.recoverPubKey(msg32, sigObj, recid)\n    } catch (err) {\n      return 2\n    }\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const scalar = new BN(seckey)\n    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2\n\n    const point = pair.getPublic().mul(scalar)\n\n    if (hashfn === undefined) {\n      const data = point.encode(null, true)\n      const sha256 = ec.hash().update(data).digest()\n      for (let i = 0; i < 32; ++i) output[i] = sha256[i]\n    } else {\n      if (!xbuf) xbuf = new Uint8Array(32)\n      const x = point.getX().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]\n\n      if (!ybuf) ybuf = new Uint8Array(32)\n      const y = point.getY().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]\n\n      const hash = hashfn(xbuf, ybuf, data)\n\n      const isValid = hash instanceof Uint8Array && hash.length === output.length\n      if (!isValid) return 2\n\n      output.set(hash)\n    }\n\n    return 0\n  }\n}\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n\nvar createHash = require('create-hash')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  var tmp = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(tmp).digest()\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n","'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","import HDKey from 'hdkey';\nimport * as ethUtil from 'ethereumjs-util';\nimport { Buffer } from 'buffer';\nvar publicToAddress = ethUtil.publicToAddress,\n    toChecksumAddress = ethUtil.toChecksumAddress;\nvar numberToGet = 5;\n\nfunction generateAddresses(account, offset) {\n  var publicKey = account.publicKey,\n      chainCode = account.chainCode,\n      path = account.path;\n  var hdk = new HDKey();\n  hdk.publicKey = new Buffer(publicKey, 'hex');\n  hdk.chainCode = new Buffer(chainCode, 'hex');\n  var addresses = [];\n\n  for (var i = offset; i < numberToGet + offset; i++) {\n    var dkey = hdk.deriveChild(i);\n    var address = publicToAddress(dkey.publicKey, true).toString('hex');\n    addresses.push({\n      dPath: \"\".concat(path, \"/\").concat(i),\n      address: toChecksumAddress(\"0x\".concat(address))\n    });\n  }\n\n  return addresses;\n}\n\nfunction isValidPath(path) {\n  var parts = path.split('/');\n\n  if (parts[0] !== 'm') {\n    return false;\n  }\n\n  if (parts[1] !== \"44'\") {\n    return false;\n  }\n\n  if (parts[2] !== \"60'\" && parts[2] !== \"1'\") {\n    return false;\n  }\n\n  if (parts[3] === undefined) {\n    return true;\n  }\n\n  var accountFieldDigit = Number(parts[3][0]);\n\n  if (isNaN(accountFieldDigit) || accountFieldDigit < 0 || parts[3][1] !== \"'\") {\n    return false;\n  }\n\n  if (parts[4] === undefined) {\n    return true;\n  }\n\n  var changeFieldDigit = Number(parts[4][0]);\n\n  if (isNaN(changeFieldDigit) || changeFieldDigit < 0) {\n    return false;\n  }\n\n  if (parts[5] === undefined) {\n    return true;\n  }\n\n  var addressFieldDigit = Number(parts[5][0]);\n\n  if (isNaN(addressFieldDigit) || addressFieldDigit < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport { generateAddresses, isValidPath };"],"sourceRoot":""}
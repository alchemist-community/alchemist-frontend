{"version":3,"sources":["../node_modules/hdkey/lib/hdkey.js","../node_modules/bs58/index.js","../node_modules/bs58check/index.js","../node_modules/bs58check/base.js","../node_modules/base-x/src/index.js","../node_modules/bnc-onboard/dist/esm/hd-wallet-642b97e3.js"],"names":["assert","require","Buffer","crypto","bs58check","secp256k1","MASTER_SECRET","from","BITCOIN_VERSIONS","private","public","HDKey","versions","this","depth","index","_privateKey","_publicKey","chainCode","_fingerprint","parentFingerprint","serialize","hdkey","version","key","buffer","allocUnsafe","writeUInt32BE","writeUInt8","fingerprint","copy","hash160","buf","sha","createHash","update","digest","Object","defineProperty","prototype","get","_identifier","identifier","set","value","equal","length","privateKeyVerify","publicKeyCreate","publicKey","slice","readUInt32BE","publicKeyVerify","publicKeyConvert","encode","concat","alloc","privateKey","derive","path","entries","split","forEach","c","i","hardened","childIndex","parseInt","deriveChild","test","data","isHardened","indexBuffer","pk","zb","I","createHmac","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","sign","hash","ecdsaSign","signature","verify","ecdsaVerify","Uint8Array","wipePrivateData","randomBytes","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","decode","readUInt8","fromJSON","obj","HARDENED_OFFSET","module","exports","basex","bs58checkBase","tmp","base58","checksumFn","decodeRaw","payload","checksum","newChecksum","string","Error","decodeUnsafe","_Buffer","ALPHABET","TypeError","BASE_MAP","j","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","source","psz","zeroes","size","b256","carry","it3","it4","vch","fill","Array","isArray","isBuffer","pbegin","pend","b58","it1","it2","str","repeat","publicToAddress","ethUtil","toChecksumAddress","generateAddresses","account","offset","hdk","addresses","dkey","address","toString","push","dPath","isValidPath","parts","undefined","accountFieldDigit","Number","isNaN","changeFieldDigit","addressFieldDigit"],"mappings":"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","file":"static/js/7.cc9edc9f.chunk.js","sourcesContent":["var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n\nvar createHash = require('create-hash')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  var tmp = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(tmp).digest()\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n","'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","import HDKey from 'hdkey';\nimport * as ethUtil from 'ethereumjs-util';\nimport { Buffer } from 'buffer';\nvar publicToAddress = ethUtil.publicToAddress,\n    toChecksumAddress = ethUtil.toChecksumAddress;\nvar numberToGet = 5;\n\nfunction generateAddresses(account, offset) {\n  var publicKey = account.publicKey,\n      chainCode = account.chainCode,\n      path = account.path;\n  var hdk = new HDKey();\n  hdk.publicKey = new Buffer(publicKey, 'hex');\n  hdk.chainCode = new Buffer(chainCode, 'hex');\n  var addresses = [];\n\n  for (var i = offset; i < numberToGet + offset; i++) {\n    var dkey = hdk.deriveChild(i);\n    var address = publicToAddress(dkey.publicKey, true).toString('hex');\n    addresses.push({\n      dPath: \"\".concat(path, \"/\").concat(i),\n      address: toChecksumAddress(\"0x\".concat(address))\n    });\n  }\n\n  return addresses;\n}\n\nfunction isValidPath(path) {\n  var parts = path.split('/');\n\n  if (parts[0] !== 'm') {\n    return false;\n  }\n\n  if (parts[1] !== \"44'\") {\n    return false;\n  }\n\n  if (parts[2] !== \"60'\" && parts[2] !== \"1'\") {\n    return false;\n  }\n\n  if (parts[3] === undefined) {\n    return true;\n  }\n\n  var accountFieldDigit = Number(parts[3][0]);\n\n  if (isNaN(accountFieldDigit) || accountFieldDigit < 0 || parts[3][1] !== \"'\") {\n    return false;\n  }\n\n  if (parts[4] === undefined) {\n    return true;\n  }\n\n  var changeFieldDigit = Number(parts[4][0]);\n\n  if (isNaN(changeFieldDigit) || changeFieldDigit < 0) {\n    return false;\n  }\n\n  if (parts[5] === undefined) {\n    return true;\n  }\n\n  var addressFieldDigit = Number(parts[5][0]);\n\n  if (isNaN(addressFieldDigit) || addressFieldDigit < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport { generateAddresses, isValidPath };"],"sourceRoot":""}